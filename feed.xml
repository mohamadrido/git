<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://pretendedstudio.com/</id><title>Cotes' Blog</title><subtitle>The personal blog of Cotes Chung. Mainly records some of the author's work and life experience.</subtitle> <updated>2021-11-02T17:55:57+08:00</updated> <author> <name>Cotes Chung</name> <uri>https://pretendedstudio.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://pretendedstudio.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://pretendedstudio.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 Cotes Chung </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>GitHub 的 Git LFS 奇遇</title><link href="https://pretendedstudio.com/posts/strange-things-encountered-in-git-lfs-on-github/" rel="alternate" type="text/html" title="GitHub 的 Git LFS 奇遇" /><published>2021-10-25T21:32:00+08:00</published> <updated>2021-10-25T21:32:00+08:00</updated> <id>https://pretendedstudio.com/posts/strange-things-encountered-in-git-lfs-on-github/</id> <content src="https://pretendedstudio.com/posts/strange-things-encountered-in-git-lfs-on-github/" /> <author> <name>Cotes Chung</name> </author> <category term="Tech" /> <category term="Git" /> <summary> 本月 21 号晚上，我的邮箱收到一封了由 GitHub 发送，标题为「At 80% of Git LFS data quota for cotes2020」的邮件，内容是说我账号的 Git LFS 用量使用了 96% 的额度。所以马上登陆 GitHub 一探究竟，原来是一个开源仓库消耗了这些空间： 看到这幅景象，开始思考问题，首先我平常在公开项目的 commit 从来没有使用 Git LFS，其次上述开源项目的体积仅有 2.64 MB, 就算全部存储在 LFS，也不应该有 0.96 GB 这么夸张的数字。 所以有两个疑问： 为何会使用了 Git LFS？ 为何 LFS 用量达到 0.96 GB？ 翻阅 GitHub Docs 的这篇文章，里面说删除云端的 LFS 文件需要联系 GitHub Support。于是给客服发了邮件，并很快得到了回复，说有 4 个文... </summary> </entry> <entry><title>开箱 GitLab Flow 的 Release 分支</title><link href="https://pretendedstudio.com/posts/change-the-git-branch-model-of-the-project/" rel="alternate" type="text/html" title="开箱 GitLab Flow 的 Release 分支" /><published>2021-02-01T17:47:00+08:00</published> <updated>2021-10-02T21:34:39+08:00</updated> <id>https://pretendedstudio.com/posts/change-the-git-branch-model-of-the-project/</id> <content src="https://pretendedstudio.com/posts/change-the-git-branch-model-of-the-project/" /> <author> <name>Cotes Chung</name> </author> <category term="Tech" /> <category term="Git" /> <summary> Chirpy 项目从 v3.0.0 版开始，转型成了一个 gem-based 项目：支持在 RubyGems.org 上对外发布 gem 包，方便用户端升级。项目原本使用的是 GitLab Flow 的持续发布方案：采用 master 和 production 双子星分支。这对 gem 版本跟踪开始力不从心，所以计划将其转换成 release 分支。 Release 分支 GitLab Flow 的 Release 分支核心思想是： 主分支开发成熟后，商定一个语义化版本号，格式为：&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;。如果是新的 major 或 minor 版本，就从主分支派生一个新的 release 分支，命名格式为 &amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;-stable。不过 release 分... </summary> </entry> <entry><title>Docker 运行 Shadowsocks</title><link href="https://pretendedstudio.com/posts/steup-shadowsocks-with-docker/" rel="alternate" type="text/html" title="Docker 运行 Shadowsocks" /><published>2020-07-01T16:42:00+08:00</published> <updated>2021-07-08T21:20:30+08:00</updated> <id>https://pretendedstudio.com/posts/steup-shadowsocks-with-docker/</id> <content src="https://pretendedstudio.com/posts/steup-shadowsocks-with-docker/" /> <author> <name>Cotes Chung</name> </author> <category term="Tech" /> <category term="Shadowsocks" /> <summary> 在更换一台新的梯子型 VPS 时，需要快速搭建 Shadowsocks，在运行 Linux 的 VPS 上采用 Docker 镜像安装将是个十分便捷的选择：无须考虑各种软件依赖对机器环境的污染（ Linux 跑服务不用 Docker 就是原罪）。 虽然搭梯子频率很低，但在实施的时候，须翻阅好几个网站看文档，略烦。所以本文将略微讲述采用 Docker 搭建 Shadowsocks Server 的过程。 安装 Docker Engine 因为是裸机，所以安装 Docker Engine 是不能偷懒的，参考 Docker 官方文档 完成安装。出于本人的个人需要，下面将摘录在 Ubuntu Server 安装的步骤。 配置 apt 仓库 为了允许服务器通过 HTTPS 拉取 Docker 仓库，需要更新 apt 索引以及安装所需的 packages: $... </summary> </entry> <entry><title>对开源的一些体会</title><link href="https://pretendedstudio.com/posts/thoughts-on-open-source/" rel="alternate" type="text/html" title="对开源的一些体会" /><published>2020-04-04T22:04:00+08:00</published> <updated>2020-04-04T22:04:00+08:00</updated> <id>https://pretendedstudio.com/posts/thoughts-on-open-source/</id> <content src="https://pretendedstudio.com/posts/thoughts-on-open-source/" /> <author> <name>Cotes Chung</name> </author> <category term="Tech" /> <category term="Mix" /> <summary> 2020 年首文，四五个月没写过新文章，再不出一篇，博客都快要长草了。刚好昨天 Chirpy 项目拿到了第 100 个 star，所以踩点回忆一下将博客项目开源的初衷、过程中的体会以及对未来的一些想法。 开源的初衷 所有的故事的开始，都会出现一个不可逃避的问题，当时我面临的问题是，找不到自己想要的博客模版。另外，对前端技术觊觎已久却没有机会去接触实践，所以就从 2017 年末开始新建一个 Jekyll 项目，全新开发自己的博客。 从第一行代码开始，博客项目在 GitHub 上一直保持开源的状态，原因有两个： 在 2019 年 1 月 之前，白嫖党不能把项目设置为私有。 白嫖党不能对私有项目启用 GitHub Pages 服务。 第一个原因已消逝在历史长河，而第二个至今还在延续。起初我选择开源，完全是受丐帮精神的驱使，旨在把博客免费托管在 GitHub Pages... </summary> </entry> <entry><title>MacBook 合盖自动关闭蓝牙</title><link href="https://pretendedstudio.com/posts/turn-off-bluetooth-when-macbook-sleeps/" rel="alternate" type="text/html" title="MacBook 合盖自动关闭蓝牙" /><published>2019-11-08T13:31:00+08:00</published> <updated>2020-04-09T21:21:36+08:00</updated> <id>https://pretendedstudio.com/posts/turn-off-bluetooth-when-macbook-sleeps/</id> <content src="https://pretendedstudio.com/posts/turn-off-bluetooth-when-macbook-sleeps/" /> <author> <name>Cotes Chung</name> </author> <category term="Tech" /> <category term="Mac" /> <summary> 用过 MacBook 系列产品的童鞋应该都会发现，在合盖之后，蓝牙进程还是在后台处于开启状态。这对于限制链接数的蓝牙设备就会造成名额占位。 例如，本人手上的某款蓝牙耳机，限制最多接入两个音源设备，MacBook 上用蓝牙耳机听着音乐，同时平板也保持和耳机的链接，几分钟后完成手上工作，合盖 Mac 潇洒离座，然后手插裤兜掏出手机想用蓝牙耳机听歌，这时耳机链接名额已经给平板和 Mac 占满了，无法再接纳手机。因此就不得不灰溜溜地归位，手动关闭平板或者 Mac 对耳机的链接。 耗电与否先不讨论，蓝牙耳机的使用体验上已经大打折扣了。如果可以改变 MacBook 的习性，让它合盖之后自动关闭蓝牙，就不用手动释放对蓝牙设备的占用了。So, 果断开工让 MacBook 成为更聪明的宝宝！ CLI 关闭蓝牙 blueutil 是 Mac 上的控制蓝牙的命令行工具，可以检查蓝牙状态，以及开启/... </summary> </entry> </feed>
